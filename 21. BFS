#include <stdio.h>
#include <stdlib.h>

#define MAX 10

int queue[MAX], front = -1, rear = -1;
int graph[MAX][MAX], visited[MAX];
int n;

void enqueue(int value) {
    if (rear == MAX - 1)
        printf("Queue is full\n");
    else {
        if (front == -1) front = 0;
        rear++;
        queue[rear] = value;
    }
}

int dequeue() {
    int value;
    if (front == -1)
        printf("Queue is empty\n");
    else {
        value = queue[front];
        front++;
        if (front > rear)
            front = rear = -1;
    }
    return value;
}

void bfs(int start) {
    int i;
    enqueue(start);
    visited[start] = 1;

    while (front != -1) {
        int node = dequeue();
        printf("%d ", node);

        for (i = 0; i < n; i++) {
            if (graph[node][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int i, j, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    for (i = 0; i < n; i++)
        visited[i] = 0;

    printf("Enter the starting vertex: ");
    scanf("%d", &start);

    printf("BFS Traversal starting from vertex %d: ", start);
    bfs(start);

    return 0;
}
