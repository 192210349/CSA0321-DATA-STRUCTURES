#include <stdio.h>
#include <limits.h>

#define MAX 10

int graph[MAX][MAX], parent[MAX], key[MAX], visited[MAX];
int n;

void prims(int start) {
    // Initialize the key values and visited array
    for (int i = 0; i < n; i++) {
        key[i] = INT_MAX;  // Set all key values to infinity
        visited[i] = 0;    // Mark all vertices as unvisited
        parent[i] = -1;    // No parent initially
    }

    key[start] = 0;  // Starting vertex has key 0

    for (int count = 0; count < n - 1; count++) {
        // Find the vertex with the minimum key value
        int u = -1, minKey = INT_MAX;
        for (int v = 0; v < n; v++) {
            if (!visited[v] && key[v] < minKey) {
                minKey = key[v];
                u = v;
            }
        }

        // Mark the selected vertex as visited
        visited[u] = 1;

        // Update key and parent values for the adjacent vertices
        for (int v = 0; v < n; v++) {
            if (graph[u][v] && !visited[v] && graph[u][v] < key[v]) {
                key[v] = graph[u][v];
                parent[v] = u;
            }
        }
    }
}

void printMST() {
    printf("Edge\tWeight\n");
    for (int i = 1; i < n; i++) {
        printf("%d - %d\t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int edges, u, v, weight;
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    // Initialize the graph with 0
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            graph[i][j] = 0;
        }
    }

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // Input edges and weights
    for (int i = 0; i < edges; i++) {
        printf("Enter edge (u, v, weight): ");
        scanf("%d %d %d", &u, &v, &weight);
        graph[u][v] = weight;
        graph[v][u] = weight; // For undirected graph
    }

    int start;
    printf("Enter the starting node: ");
    scanf("%d", &start);

    prims(start);
    printf("Minimum Spanning Tree (MST):\n");
    printMST();

    return 0;
}
