#include <stdio.h>

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    int i, j, temp, largest, left, right;

    // Build max heap
    for (i = n / 2 - 1; i >= 0; i--) {
        largest = i;
        left = 2 * i + 1;
        right = 2 * i + 2;

        if (left < n && arr[left] > arr[largest])
            largest = left;

        if (right < n && arr[right] > arr[largest])
            largest = right;

        if (largest != i) {
            temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp;
            
            // Heapify the affected subtree
            i = n / 2 - 1;
        }
    }

    // Extract elements from heap
    for (i = n - 1; i >= 0; i--) {
        // Move current root to end
        temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        // Call heapify on the reduced heap
        largest = 0;
        left = 2 * largest + 1;
        right = 2 * largest + 2;

        while (left < i) {
            if (arr[left] > arr[largest])
                largest = left;

            if (right < i && arr[right] > arr[largest])
                largest = right;

            if (largest != left) {
                temp = arr[largest];
                arr[largest] = arr[left];
                arr[left] = temp;
                largest = left;
                left = 2 * largest + 1;
                right = 2 * largest + 2;
            } else {
                break;
            }
        }
    }

    // Display sorted array
    printf("Sorted array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
